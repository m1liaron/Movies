{"version":3,"file":"static/js/600.db3a479e.chunk.js","mappings":"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","sources":["features/Movies/MovieCard.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.tsx","../node_modules/@mui/icons-material/Favorite.js"],"sourcesContent":["import {Link as RouterLink} from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia, IconButton, Tooltip,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport {memo} from \"react\";\r\ninterface MovieCardProps {\r\n    id: number;\r\n    title: string;\r\n    overview: string;\r\n    popularity: number;\r\n    image?: string;\r\n    enableUserActions?: boolean;\r\n    onAddFavorite?(id: number):void\r\n}\r\n\r\nfunction MovieCard({\r\n  id,\r\n  title,\r\n  overview,\r\n  popularity,\r\n  enableUserActions,\r\n   onAddFavorite,\r\n  image = '/thumbnail.png'\r\n}: MovieCardProps){\r\n\r\n    return (\r\n        <Card sx={{height: \"100%\", display:'flex', flexDirection: 'column'}}>\r\n            <CardMedia component=\"div\" image={image} sx={{pt: \"56.25%\"}}/>\r\n            <CardContent sx={{flexGrow: 1}}>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    {/*<Link to={`/movies/${id}`}>{title}</Link>*/}\r\n                    {title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">{overview}</Typography>\r\n                <Typography variant=\"button\" display=\"block\" mt={2}>\r\n                    {popularity}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button component={RouterLink} to={`/movies/${id}`} color=\"secondary\">\r\n                    Details\r\n                </Button>\r\n                {enableUserActions && (<Tooltip title=\"Add to favorites\">\r\n                    <IconButton onClick={() => onAddFavorite?.(id)}>\r\n                        <FavoriteIcon/>\r\n                    </IconButton>\r\n                </Tooltip>)}\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default memo(MovieCard);","import {lazy, Suspense, useCallback, useContext, useEffect, useState} from \"react\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport {Container, Grid, LinearProgress, Typography} from \"@mui/material\";\r\nimport {anonymousUser, AuthContext} from \"../../AuthContext\";\r\nimport {useIntersectionObserver} from \"../../hooks/useIntersectionObserver\";\r\nimport{\r\n    MoviesFilters,\r\n    MoviesQuery,\r\n    useGetConfigurationQuery,\r\n    useGetMoviesQuery\r\n} from '../../services/tmdb'\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\n\r\nconst MoviesFilter = lazy(() => import('./MoviesFilter'));\r\n\r\nconst initialQuery: MoviesQuery = {\r\n    page: 1,\r\n    filters: {}\r\n};\r\n\r\nexport default function Movies(){\r\n    const [query, setQuery] = useState<MoviesQuery>(initialQuery);\r\n\r\n    const { data: configuration } = useGetConfigurationQuery()\r\n    const { data, isFetching} = useGetMoviesQuery(query)\r\n\r\n    const movies = data?.results ?? []\r\n    const hasMorePages = data?.hasMorePages;\r\n\r\n    function formatImageUrl(path?: string) {\r\n        return path && configuration ? `${configuration?.images.base_url}w780${path}` : undefined\r\n    }\r\n\r\n    const {user, isAuthenticated} = useAuth0()\r\n\r\n    const onIntersect = useCallback(() => {\r\n        if(hasMorePages) {\r\n            setQuery(q => ({ ...q, page: q.page + 1 }))\r\n        }\r\n    }, [hasMorePages])\r\n\r\n    const [targetRef] = useIntersectionObserver({ onIntersect });\r\n\r\n    const handleAddFavorite = useCallback((id: number) => {\r\n        alert(`Not implemented! Action: ${user?.name} is adding movie ${id} to favorites.`)\r\n    }, [user?.name])\r\n\r\n    return(\r\n        <Grid container spacing={2} sx={{flexWrap:\"nowrap\"}}>\r\n            <Grid item xs=\"auto\">\r\n                <Suspense fallback={<span>Loading filters...</span>}>\r\n                    <MoviesFilter onApply={(filters) => {\r\n                        const moviesFilters: MoviesFilters = {\r\n                            keywords: filters.keywords.map(k => k.id),\r\n                            genres: filters.genres,\r\n                        }\r\n\r\n\r\n                        setQuery({\r\n                            page: 1,\r\n                            filters: moviesFilters\r\n                        });\r\n                    }}/>\r\n                </Suspense>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n        <Container sx={{py: 8}} maxWidth='lg'>\r\n            <Grid container spacing={4}>\r\n                {!isFetching && !movies.length && (\r\n                    <Typography variant=\"h6\">No movies were found that match your query.</Typography>\r\n                )}\r\n                {movies.map((m, i) => (\r\n                    <Grid item key={`${m.id}-${i}`} xs={12} sm={6} md={4}>\r\n                        <MovieCard\r\n                            key={m.id}\r\n                            id={m.id}\r\n                            title={m.title}\r\n                            overview={m.overview}\r\n                            popularity={m.popularity}\r\n                            image={formatImageUrl(m.backdrop_path)}\r\n                            enableUserActions={isAuthenticated}\r\n                            onAddFavorite={handleAddFavorite}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <div ref={targetRef}>\r\n                {isFetching && <LinearProgress color=\"secondary\" sx={{mt: 3}}/>}\r\n            </div>\r\n        </Container>\r\n         </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import {MutableRefObject, useEffect, useRef, useState} from \"react\";\r\n\r\ninterface Options {\r\n    threshold?: number;\r\n    root?: Element;\r\n    rootMargin?: string;\r\n    onIntersect?(): void\r\n}\r\n\r\ntype HookReturnType = [MutableRefObject<null>, IntersectionObserverEntry?];\r\n\r\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\r\n    const { threshold = 1.0, root = null, rootMargin = \"0px\", onIntersect } = options;\r\n    const targetRef = useRef(null);\r\n\r\n    const [entry, setEntry] = useState<IntersectionObserverEntry>()\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\r\n            const [entry] = entries;\r\n\r\n            if(entry.isIntersecting) {\r\n                onIntersect?.()\r\n            }\r\n\r\n            setEntry(entry)\r\n        }\r\n        , {threshold, root, rootMargin})\r\n        const currentRef = targetRef.current;\r\n        if(currentRef){\r\n            observer.observe(currentRef)\r\n        }\r\n        return function (){\r\n            if(currentRef){\r\n                observer.disconnect()\r\n            }\r\n        }\r\n    }, [onIntersect, root, rootMargin, threshold])\r\n\r\n    return [targetRef, entry]\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54z\"\n}), 'Favorite');"],"names":["MovieCard","_ref","id","title","overview","popularity","enableUserActions","onAddFavorite","image","_jsxs","Card","sx","height","display","flexDirection","children","_jsx","CardMedia","component","pt","CardContent","flexGrow","Typography","variant","gutterBottom","color","mt","CardActions","Button","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","MoviesFilter","lazy","initialQuery","page","filters","Movies","_data$results","query","setQuery","useState","data","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePages","user","isAuthenticated","useAuth0","onIntersect","useCallback","q","targetRef","options","arguments","length","undefined","threshold","root","rootMargin","useRef","entry","setEntry","useEffect","observer","IntersectionObserver","entries","isIntersecting","currentRef","current","observe","disconnect","useIntersectionObserver","handleAddFavorite","alert","name","Grid","container","spacing","flexWrap","item","xs","Suspense","fallback","onApply","moviesFilters","keywords","map","k","genres","Container","py","maxWidth","m","i","sm","md","path","backdrop_path","images","base_url","ref","LinearProgress","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}