{"version":3,"file":"static/js/487.af973a75.chunk.js","mappings":"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","sources":["features/Movies/MoviesFilter.tsx"],"sourcesContent":["import {\r\n    FormControl,\r\n    Paper,\r\n    Autocomplete,\r\n    TextField,\r\n    Button,\r\n    debounce,\r\n    FormLabel,\r\n    FormControlLabel,\r\n    Checkbox, Skeleton, FormGroup\r\n} from \"@mui/material\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {FilterAltOutlined} from \"@mui/icons-material\";\r\nimport {KeyWordItem} from \"../../services/tmdb\";\r\nimport {useMemo, useState} from \"react\";\r\nimport {useGetGenresQuery, useGetKeyWordsQuery} from \"../../services/tmdb\";\r\n\r\nexport interface Filters {\r\n    keywords: KeyWordItem[];\r\n    genres: number[]\r\n}\r\ninterface MoviesFilterProps{\r\n    onApply(filters: Filters): void\r\n}\r\n\r\nexport default function MoviesFilter({onApply} : MoviesFilterProps) {\r\n    const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\")\r\n    const { data: keywordsOptions = [], isLoading: keywordsLoading } =  useGetKeyWordsQuery(keywordsQuery)\r\n    useGetKeyWordsQuery(keywordsQuery, { skip: !keywordsQuery }); // skip request to API\r\n\r\n    const { data: genres = [], isLoading: genresLoading} = useGetGenresQuery();\r\n\r\n    const {handleSubmit, control} = useForm<Filters>({\r\n        defaultValues:{\r\n            keywords:[],\r\n            genres: [],\r\n        },\r\n    });\r\n\r\n    const debouncedFetchKeywordOptions = useMemo(() => debounce((query: string) => {\r\n        setKeywordsQuery(query)\r\n    }, 1000),[]);\r\n\r\n    return (\r\n        <Paper sx={{ m: 2, p:0.5}}>\r\n            <form onSubmit={handleSubmit(onApply)}>\r\n                <FormControl\r\n                    component=\"fieldset\"\r\n                    variant=\"standard\"\r\n                    sx={{m: 2, display: \"block\"}}\r\n                >\r\n                    <Controller\r\n                        name=\"keywords\"\r\n                        control={control}\r\n                        render={({ field: { onChange, value } }) => (\r\n                            <Autocomplete\r\n                                multiple\r\n                                loading={keywordsLoading}\r\n                                disablePortal\r\n                                options={keywordsOptions}\r\n                                filterOptions={(x) => x}\r\n                                getOptionLabel={(option) => option.name}\r\n                                onChange={(_, value) => onChange(value)}\r\n                                value={value}\r\n                                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                onInputChange={(_, value) => debouncedFetchKeywordOptions(value)}\r\n                                renderInput={(params) => <TextField {...params} label=\"Keywords\" />}\r\n                            />\r\n                    )}/>\r\n                </FormControl>\r\n                <FormControl\r\n                    component=\"fieldset\"\r\n                    variant=\"standard\"\r\n                    sx={{m: 2, display: \"block\"}}\r\n                >\r\n                    {genresLoading ? (\r\n                        <Skeleton width={300} height={480}/>\r\n                    ) : (\r\n                        <>\r\n                        <FormLabel component=\"legend\">Genres</FormLabel>\r\n                        <FormGroup sx={{ maxHeight: 500 }}>\r\n                            <Controller\r\n                                name=\"genres\"\r\n                                control={control}\r\n                                render={({field}) => (\r\n                                    <>\r\n                                        {genres.map((genre) => (\r\n                                            <FormControlLabel\r\n                                                key={genre.id}\r\n                                                control={\r\n                                                    <Checkbox\r\n                                                        value={genre.id}\r\n                                                        checked={field.value.includes(genre.id)}\r\n                                                        onChange={(event, checked) => {\r\n                                                            const valueNumber = Number(event.target.value);\r\n                                                            if (checked) {\r\n                                                                field.onChange([...field.value, valueNumber]);\r\n                                                            } else {\r\n                                                                field.onChange(field.value.filter((value) => value !== valueNumber));\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                }\r\n                                                label={genre.name}\r\n                                            />\r\n                                        ))}\r\n                                    </>\r\n                                )}/>\r\n                        </FormGroup>\r\n                    </>)}\r\n                </FormControl>\r\n                <Button type=\"submit\" variant=\"contained\" startIcon={<FilterAltOutlined/>} sx={{m:2}}>\r\n                    Apply filter\r\n                </Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n"],"names":["MoviesFilter","_ref","onApply","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeyWordsQuery","skip","genres","genresLoading","useGetGenresQuery","handleSubmit","control","useForm","defaultValues","keywords","debouncedFetchKeywordOptions","useMemo","debounce","query","_jsx","Paper","sx","m","p","children","_jsxs","onSubmit","FormControl","component","variant","display","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","loading","disablePortal","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","id","onInputChange","renderInput","params","TextField","label","Skeleton","width","height","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","Button","type","startIcon","FilterAltOutlined"],"sourceRoot":""}